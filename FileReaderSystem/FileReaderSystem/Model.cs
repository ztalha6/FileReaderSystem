using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome10 = Welcome10.FromJson(jsonString);

namespace FileReaderSystem
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome10
    {
        [JsonProperty("VehicleReport")]
        public VehicleReport VehicleReport { get; set; }
    }

    public partial class VehicleReport
    {
        [JsonProperty("ServiceTool")]
        public ServiceTool ServiceTool { get; set; }

        [JsonProperty("VehicleInformation")]
        public VehicleInformation VehicleInformation { get; set; }

        [JsonProperty("ComponentList")]
        public ComponentList ComponentList { get; set; }

        [JsonProperty("UserData")]
        public UserData UserData { get; set; }

        [JsonProperty("_xmlns:xsi")]
        public Uri XmlnsXsi { get; set; }

        [JsonProperty("_xmlns")]
        public Uri Xmlns { get; set; }

        [JsonProperty("_xsi:schemaLocation")]
        public Uri XsiSchemaLocation { get; set; }

        [JsonProperty("_VDXVersion")]
        public string VdxVersion { get; set; }
    }

    public partial class ComponentList
    {
        [JsonProperty("Component")]
        public Component[] Component { get; set; }
    }

    public partial class Component
    {
        [JsonProperty("ECUShortName")]
        public string EcuShortName { get; set; }

        [JsonProperty("LocationShortName")]
        public string LocationShortName { get; set; }

        [JsonProperty("LocationAccessKey")]
        public string LocationAccessKey { get; set; }

        [JsonProperty("CommunicationProtocol", NullValueHandling = NullValueHandling.Ignore)]
        public CommunicationProtocol? CommunicationProtocol { get; set; }

        [JsonProperty("CommunicationState")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long CommunicationState { get; set; }

        [JsonProperty("DiagnosticInfo", NullValueHandling = NullValueHandling.Ignore)]
        public DiagnosticInfo DiagnosticInfo { get; set; }

        [JsonProperty("DTCCount", NullValueHandling = NullValueHandling.Ignore)]
        public DtcCount DtcCount { get; set; }

        [JsonProperty("SWHWInformation", NullValueHandling = NullValueHandling.Ignore)]
        public SwhwInformation SwhwInformation { get; set; }

        [JsonProperty("DTCList", NullValueHandling = NullValueHandling.Ignore)]
        public DtcList DtcList { get; set; }

        [JsonProperty("AdditionalService", NullValueHandling = NullValueHandling.Ignore)]
        public AdditionalServiceUnion? AdditionalService { get; set; }
    }

    public partial class AdditionalServiceElement
    {
        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("LongName")]
        public string LongName { get; set; }

        [JsonProperty("DisplayName")]
        public string DisplayName { get; set; }

        [JsonProperty("Request")]
        public Request Request { get; set; }

        [JsonProperty("Result")]
        public Result Result { get; set; }
    }

    public partial class Request
    {
        [JsonProperty("Parameter")]
        public Parameter[] Parameter { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("LongName")]
        public string LongName { get; set; }

        [JsonProperty("Value")]
        public string Value { get; set; }

        [JsonProperty("Type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("Unit", NullValueHandling = NullValueHandling.Ignore)]
        public ParameterUnit? Unit { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("Response")]
        public Request Response { get; set; }
    }

    public partial class DiagnosticInfo
    {
        [JsonProperty("DiagnosticInfoValue")]
        public string DiagnosticInfoValue { get; set; }
    }

    public partial class DtcCount
    {
        [JsonProperty("DTCCountValue")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long DtcCountValue { get; set; }
    }

    public partial class DtcList
    {
        [JsonProperty("DTC")]
        public DtcUnion Dtc { get; set; }

        [JsonProperty("_Mask")]
        public Mask Mask { get; set; }
    }

    public partial class DtcElement
    {
        [JsonProperty("Number")]
        public string Number { get; set; }

        [JsonProperty("SAENumber")]
        public string SaeNumber { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("TestCompletion")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool TestCompletion { get; set; }

        [JsonProperty("Status")]
        public string Status { get; set; }

        [JsonProperty("StatusByte")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long StatusByte { get; set; }

        [JsonProperty("ExtendedDataRecords", NullValueHandling = NullValueHandling.Ignore)]
        public ExtendedDataRecords ExtendedDataRecords { get; set; }

        [JsonProperty("SnapshotDataRecords", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleSnapshotDataRecords SnapshotDataRecords { get; set; }
    }

    public partial class ExtendedDataRecords
    {
        [JsonProperty("ExtendedDataRecord")]
        public ExtendedDataRecord[] ExtendedDataRecord { get; set; }
    }

    public partial class ExtendedDataRecord
    {
        [JsonProperty("ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("LongName")]
        public string LongName { get; set; }

        [JsonProperty("Value")]
        public string Value { get; set; }

        [JsonProperty("Type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("RangeInfo")]
        public RangeInfo RangeInfo { get; set; }

        [JsonProperty("RawValue")]
        public string RawValue { get; set; }

        [JsonProperty("Unit", NullValueHandling = NullValueHandling.Ignore)]
        public ExtendedDataRecordUnit? Unit { get; set; }
    }

    public partial class PurpleSnapshotDataRecords
    {
        [JsonProperty("SnapshotDataRecord", NullValueHandling = NullValueHandling.Ignore)]
        public SnapshotDataRecordElement[] SnapshotDataRecord { get; set; }

        [JsonProperty("_NumberOfSnapshotDataRecords")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long NumberOfSnapshotDataRecords { get; set; }

        [JsonProperty("CommunicationError", NullValueHandling = NullValueHandling.Ignore)]
        public CommunicationError CommunicationError { get; set; }
    }

    public partial class CommunicationError
    {
        [JsonProperty("State")]
        public string State { get; set; }

        [JsonProperty("ErrorCode")]
        public string ErrorCode { get; set; }

        [JsonProperty("VendorCode")]
        public string VendorCode { get; set; }

        [JsonProperty("ErrorText")]
        public string ErrorText { get; set; }

        [JsonProperty("VendorText")]
        public string VendorText { get; set; }
    }

    public partial class SnapshotDataRecordElement
    {
        [JsonProperty("SnapshotRecordNumber")]
        public SnapshotRecordNumber SnapshotRecordNumber { get; set; }

        [JsonProperty("NumberofDIDs")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long NumberofDiDs { get; set; }

        [JsonProperty("DataIdentifier")]
        public PurpleDataIdentifier[] DataIdentifier { get; set; }
    }

    public partial class PurpleDataIdentifier
    {
        [JsonProperty("DID")]
        public string Did { get; set; }

        [JsonProperty("Params")]
        public PurpleParams Params { get; set; }
    }

    public partial class PurpleParams
    {
        [JsonProperty("Param")]
        public Param Param { get; set; }
    }

    public partial class SnapshotRecordNumber
    {
        [JsonProperty("Value")]
        public Value Value { get; set; }

        [JsonProperty("RawValue")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long RawValue { get; set; }
    }

    public partial class PurpleDtc
    {
        [JsonProperty("Number")]
        public string Number { get; set; }

        [JsonProperty("SAENumber")]
        public string SaeNumber { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("TestCompletion")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool TestCompletion { get; set; }

        [JsonProperty("Status")]
        public string Status { get; set; }

        [JsonProperty("StatusByte")]
        public string StatusByte { get; set; }

        [JsonProperty("ExtendedDataRecords")]
        public ExtendedDataRecords ExtendedDataRecords { get; set; }

        [JsonProperty("SnapshotDataRecords")]
        public FluffySnapshotDataRecords SnapshotDataRecords { get; set; }
    }

    public partial class FluffySnapshotDataRecords
    {
        [JsonProperty("CommunicationError", NullValueHandling = NullValueHandling.Ignore)]
        public CommunicationError CommunicationError { get; set; }

        [JsonProperty("_NumberOfSnapshotDataRecords")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long NumberOfSnapshotDataRecords { get; set; }

        [JsonProperty("SnapshotDataRecord", NullValueHandling = NullValueHandling.Ignore)]
        public SnapshotDataRecordUnion? SnapshotDataRecord { get; set; }
    }

    public partial class PurpleSnapshotDataRecord
    {
        [JsonProperty("SnapshotRecordNumber")]
        public SnapshotRecordNumber SnapshotRecordNumber { get; set; }

        [JsonProperty("NumberofDIDs")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long NumberofDiDs { get; set; }

        [JsonProperty("DataIdentifier")]
        public FluffyDataIdentifier[] DataIdentifier { get; set; }
    }

    public partial class FluffyDataIdentifier
    {
        [JsonProperty("DID")]
        public string Did { get; set; }

        [JsonProperty("Params")]
        public FluffyParams Params { get; set; }
    }

    public partial class FluffyParams
    {
        [JsonProperty("Param")]
        public ExtendedDataRecord Param { get; set; }
    }

    public partial class SwhwInformation
    {
        [JsonProperty("Software")]
        public Software Software { get; set; }

        [JsonProperty("Hardware")]
        public Ware Hardware { get; set; }
    }

    public partial class Ware
    {
        [JsonProperty("PartNumber", NullValueHandling = NullValueHandling.Ignore)]
        public PartNumber PartNumber { get; set; }

        [JsonProperty("Version")]
        public HardwareVersion Version { get; set; }

        [JsonProperty("Supplier")]
        public Supplier Supplier { get; set; }

        [JsonProperty("Category", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long? Category { get; set; }
    }

    public partial class PartNumber
    {
        [JsonProperty("PartNumberValue")]
        public string PartNumberValue { get; set; }
    }

    public partial class Supplier
    {
        [JsonProperty("Code")]
        public string Code { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }
    }

    public partial class HardwareVersion
    {
        [JsonProperty("VersionValue")]
        public string VersionValue { get; set; }
    }

    public partial class ServiceTool
    {
        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Version")]
        public string Version { get; set; }

        [JsonProperty("UserID")]
        public string UserId { get; set; }

        [JsonProperty("ExecutionTime")]
        public DateTimeOffset ExecutionTime { get; set; }

        [JsonProperty("ProjectName")]
        public string ProjectName { get; set; }
    }

    public partial class UserData
    {
        [JsonProperty("Monaco")]
        public Monaco Monaco { get; set; }
    }

    public partial class Monaco
    {
        [JsonProperty("Project")]
        public Project Project { get; set; }

        [JsonProperty("Global")]
        public Global Global { get; set; }
    }

    public partial class Global
    {
        [JsonProperty("Version")]
        public GlobalVersion Version { get; set; }
    }

    public partial class GlobalVersion
    {
        [JsonProperty("SMR")]
        public Smr[] Smr { get; set; }
    }

    public partial class Smr
    {
        [JsonProperty("_ShortName")]
        public string ShortName { get; set; }

        [JsonProperty("_FileName")]
        public string FileName { get; set; }

        [JsonProperty("__text")]
        public string Text { get; set; }
    }

    public partial class Project
    {
        [JsonProperty("Version")]
        public GlobalVersion Version { get; set; }

        [JsonProperty("_Name")]
        public string Name { get; set; }
    }

    public partial class VehicleInformation
    {
        [JsonProperty("FiNASNumber")]
        public string FiNasNumber { get; set; }

        [JsonProperty("IdentificationNumber")]
        public IdentificationNumber IdentificationNumber { get; set; }

        [JsonProperty("ModelLineNumber")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long ModelLineNumber { get; set; }

        [JsonProperty("Odo")]
        public Odo Odo { get; set; }

        [JsonProperty("ChangeDate")]
        public DateTimeOffset ChangeDate { get; set; }

        [JsonProperty("ServiceType")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long ServiceType { get; set; }
    }

    public partial class IdentificationNumber
    {
        [JsonProperty("IdentificationNumberValue")]
        public string IdentificationNumberValue { get; set; }
    }

    public partial class Odo
    {
        [JsonProperty("OdoValue")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long OdoValue { get; set; }
    }

    public enum TypeEnum { Bitfield, Bytefield, Empty, Float32, Float64, Int32, String, Uint32 };

    public enum ParameterUnit { Ah, C, D, Days, Empty, G, H, KAh, Km, KmMiles, M, MA, MOhm, Mg, Min, Mm, Months, Ms, NoUnit, S, S2, Unit, UnitMg, UnitS, V, Years, Ω };

    public enum CommunicationProtocol { Uds };

    public enum RangeInfo { ValueNotAvailable, ValueNotDefined, ValueNotValid, ValueOk };

    public enum ExtendedDataRecordUnit { A, Bar, C, Empty, Km, KmH, MS, Mbar, Mm, MmS, Ms, Nm, Purple, Rpm, S, The1Min, Unit, V, WarmUpCycles };

    public enum Value { EcuSpecificRecord, FirstOccurence, LastOccurence };

    public enum Mask { The0X0C };

    public partial struct AdditionalServiceUnion
    {
        public AdditionalServiceElement AdditionalServiceElement;
        public AdditionalServiceElement[] AdditionalServiceElementArray;

        public static implicit operator AdditionalServiceUnion(AdditionalServiceElement AdditionalServiceElement) => new AdditionalServiceUnion { AdditionalServiceElement = AdditionalServiceElement };
        public static implicit operator AdditionalServiceUnion(AdditionalServiceElement[] AdditionalServiceElementArray) => new AdditionalServiceUnion { AdditionalServiceElementArray = AdditionalServiceElementArray };
    }

    public partial struct Param
    {
        public ExtendedDataRecord ExtendedDataRecord;
        public ExtendedDataRecord[] ExtendedDataRecordArray;

        public static implicit operator Param(ExtendedDataRecord ExtendedDataRecord) => new Param { ExtendedDataRecord = ExtendedDataRecord };
        public static implicit operator Param(ExtendedDataRecord[] ExtendedDataRecordArray) => new Param { ExtendedDataRecordArray = ExtendedDataRecordArray };
    }

    public partial struct SnapshotDataRecordUnion
    {
        public PurpleSnapshotDataRecord PurpleSnapshotDataRecord;
        public SnapshotDataRecordElement[] SnapshotDataRecordElementArray;

        public static implicit operator SnapshotDataRecordUnion(PurpleSnapshotDataRecord PurpleSnapshotDataRecord) => new SnapshotDataRecordUnion { PurpleSnapshotDataRecord = PurpleSnapshotDataRecord };
        public static implicit operator SnapshotDataRecordUnion(SnapshotDataRecordElement[] SnapshotDataRecordElementArray) => new SnapshotDataRecordUnion { SnapshotDataRecordElementArray = SnapshotDataRecordElementArray };
    }

    public partial struct DtcUnion
    {
        public DtcElement[] DtcElementArray;
        public PurpleDtc PurpleDtc;

        public static implicit operator DtcUnion(DtcElement[] DtcElementArray) => new DtcUnion { DtcElementArray = DtcElementArray };
        public static implicit operator DtcUnion(PurpleDtc PurpleDtc) => new DtcUnion { PurpleDtc = PurpleDtc };
    }

    public partial struct Software
    {
        public Ware Ware;
        public Ware[] WareArray;

        public static implicit operator Software(Ware Ware) => new Software { Ware = Ware };
        public static implicit operator Software(Ware[] WareArray) => new Software { WareArray = WareArray };
    }

    public partial class Welcome10
    {
        public static Welcome10 FromJson(string json) => JsonConvert.DeserializeObject<Welcome10>(json, FileReaderSystem.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome10 self) => JsonConvert.SerializeObject(self, FileReaderSystem.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                AdditionalServiceUnionConverter.Singleton,
                TypeEnumConverter.Singleton,
                ParameterUnitConverter.Singleton,
                CommunicationProtocolConverter.Singleton,
                DtcUnionConverter.Singleton,
                RangeInfoConverter.Singleton,
                ExtendedDataRecordUnitConverter.Singleton,
                ParamConverter.Singleton,
                ValueConverter.Singleton,
                SnapshotDataRecordUnionConverter.Singleton,
                MaskConverter.Singleton,
                SoftwareConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class AdditionalServiceUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AdditionalServiceUnion) || t == typeof(AdditionalServiceUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<AdditionalServiceElement>(reader);
                    return new AdditionalServiceUnion { AdditionalServiceElement = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<AdditionalServiceElement[]>(reader);
                    return new AdditionalServiceUnion { AdditionalServiceElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type AdditionalServiceUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (AdditionalServiceUnion)untypedValue;
            if (value.AdditionalServiceElementArray != null)
            {
                serializer.Serialize(writer, value.AdditionalServiceElementArray);
                return;
            }
            if (value.AdditionalServiceElement != null)
            {
                serializer.Serialize(writer, value.AdditionalServiceElement);
                return;
            }
            throw new Exception("Cannot marshal type AdditionalServiceUnion");
        }

        public static readonly AdditionalServiceUnionConverter Singleton = new AdditionalServiceUnionConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return TypeEnum.Empty;
                case "BITFIELD":
                    return TypeEnum.Bitfield;
                case "BYTEFIELD":
                    return TypeEnum.Bytefield;
                case "FLOAT32":
                    return TypeEnum.Float32;
                case "FLOAT64":
                    return TypeEnum.Float64;
                case "INT32":
                    return TypeEnum.Int32;
                case "STRING":
                    return TypeEnum.String;
                case "UINT32":
                    return TypeEnum.Uint32;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case TypeEnum.Bitfield:
                    serializer.Serialize(writer, "BITFIELD");
                    return;
                case TypeEnum.Bytefield:
                    serializer.Serialize(writer, "BYTEFIELD");
                    return;
                case TypeEnum.Float32:
                    serializer.Serialize(writer, "FLOAT32");
                    return;
                case TypeEnum.Float64:
                    serializer.Serialize(writer, "FLOAT64");
                    return;
                case TypeEnum.Int32:
                    serializer.Serialize(writer, "INT32");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "STRING");
                    return;
                case TypeEnum.Uint32:
                    serializer.Serialize(writer, "UINT32");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ParameterUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ParameterUnit) || t == typeof(ParameterUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "%":
                    return ParameterUnit.Empty;
                case "(°/s)^2":
                    return ParameterUnit.S2;
                case "Ah":
                    return ParameterUnit.Ah;
                case "Days":
                    return ParameterUnit.Days;
                case "Months":
                    return ParameterUnit.Months;
                case "NoUnit":
                    return ParameterUnit.NoUnit;
                case "V":
                    return ParameterUnit.V;
                case "Years":
                    return ParameterUnit.Years;
                case "d":
                    return ParameterUnit.D;
                case "g":
                    return ParameterUnit.G;
                case "h":
                    return ParameterUnit.H;
                case "kAh":
                    return ParameterUnit.KAh;
                case "km":
                    return ParameterUnit.Km;
                case "km/miles":
                    return ParameterUnit.KmMiles;
                case "m":
                    return ParameterUnit.M;
                case "mA":
                    return ParameterUnit.MA;
                case "mOhm":
                    return ParameterUnit.MOhm;
                case "mg":
                    return ParameterUnit.Mg;
                case "mg²":
                    return ParameterUnit.UnitMg;
                case "min":
                    return ParameterUnit.Min;
                case "mm":
                    return ParameterUnit.Mm;
                case "ms":
                    return ParameterUnit.Ms;
                case "s":
                    return ParameterUnit.UnitS;
                case "°":
                    return ParameterUnit.Unit;
                case "°/s":
                    return ParameterUnit.S;
                case "°C":
                    return ParameterUnit.C;
                case "Ω":
                    return ParameterUnit.Ω;
            }
            throw new Exception("Cannot unmarshal type ParameterUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ParameterUnit)untypedValue;
            switch (value)
            {
                case ParameterUnit.Empty:
                    serializer.Serialize(writer, "%");
                    return;
                case ParameterUnit.S2:
                    serializer.Serialize(writer, "(°/s)^2");
                    return;
                case ParameterUnit.Ah:
                    serializer.Serialize(writer, "Ah");
                    return;
                case ParameterUnit.Days:
                    serializer.Serialize(writer, "Days");
                    return;
                case ParameterUnit.Months:
                    serializer.Serialize(writer, "Months");
                    return;
                case ParameterUnit.NoUnit:
                    serializer.Serialize(writer, "NoUnit");
                    return;
                case ParameterUnit.V:
                    serializer.Serialize(writer, "V");
                    return;
                case ParameterUnit.Years:
                    serializer.Serialize(writer, "Years");
                    return;
                case ParameterUnit.D:
                    serializer.Serialize(writer, "d");
                    return;
                case ParameterUnit.G:
                    serializer.Serialize(writer, "g");
                    return;
                case ParameterUnit.H:
                    serializer.Serialize(writer, "h");
                    return;
                case ParameterUnit.KAh:
                    serializer.Serialize(writer, "kAh");
                    return;
                case ParameterUnit.Km:
                    serializer.Serialize(writer, "km");
                    return;
                case ParameterUnit.KmMiles:
                    serializer.Serialize(writer, "km/miles");
                    return;
                case ParameterUnit.M:
                    serializer.Serialize(writer, "m");
                    return;
                case ParameterUnit.MA:
                    serializer.Serialize(writer, "mA");
                    return;
                case ParameterUnit.MOhm:
                    serializer.Serialize(writer, "mOhm");
                    return;
                case ParameterUnit.Mg:
                    serializer.Serialize(writer, "mg");
                    return;
                case ParameterUnit.UnitMg:
                    serializer.Serialize(writer, "mg²");
                    return;
                case ParameterUnit.Min:
                    serializer.Serialize(writer, "min");
                    return;
                case ParameterUnit.Mm:
                    serializer.Serialize(writer, "mm");
                    return;
                case ParameterUnit.Ms:
                    serializer.Serialize(writer, "ms");
                    return;
                case ParameterUnit.UnitS:
                    serializer.Serialize(writer, "s");
                    return;
                case ParameterUnit.Unit:
                    serializer.Serialize(writer, "°");
                    return;
                case ParameterUnit.S:
                    serializer.Serialize(writer, "°/s");
                    return;
                case ParameterUnit.C:
                    serializer.Serialize(writer, "°C");
                    return;
                case ParameterUnit.Ω:
                    serializer.Serialize(writer, "Ω");
                    return;
            }
            throw new Exception("Cannot marshal type ParameterUnit");
        }

        public static readonly ParameterUnitConverter Singleton = new ParameterUnitConverter();
    }

    internal class CommunicationProtocolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CommunicationProtocol) || t == typeof(CommunicationProtocol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "UDS")
            {
                return CommunicationProtocol.Uds;
            }
            throw new Exception("Cannot unmarshal type CommunicationProtocol");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CommunicationProtocol)untypedValue;
            if (value == CommunicationProtocol.Uds)
            {
                serializer.Serialize(writer, "UDS");
                return;
            }
            throw new Exception("Cannot marshal type CommunicationProtocol");
        }

        public static readonly CommunicationProtocolConverter Singleton = new CommunicationProtocolConverter();
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class DtcUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DtcUnion) || t == typeof(DtcUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleDtc>(reader);
                    return new DtcUnion { PurpleDtc = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<DtcElement[]>(reader);
                    return new DtcUnion { DtcElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type DtcUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (DtcUnion)untypedValue;
            if (value.DtcElementArray != null)
            {
                serializer.Serialize(writer, value.DtcElementArray);
                return;
            }
            if (value.PurpleDtc != null)
            {
                serializer.Serialize(writer, value.PurpleDtc);
                return;
            }
            throw new Exception("Cannot marshal type DtcUnion");
        }

        public static readonly DtcUnionConverter Singleton = new DtcUnionConverter();
    }

    internal class RangeInfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RangeInfo) || t == typeof(RangeInfo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Value OK":
                    return RangeInfo.ValueOk;
                case "Value not available":
                    return RangeInfo.ValueNotAvailable;
                case "Value not defined":
                    return RangeInfo.ValueNotDefined;
                case "Value not valid":
                    return RangeInfo.ValueNotValid;
            }
            throw new Exception("Cannot unmarshal type RangeInfo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RangeInfo)untypedValue;
            switch (value)
            {
                case RangeInfo.ValueOk:
                    serializer.Serialize(writer, "Value OK");
                    return;
                case RangeInfo.ValueNotAvailable:
                    serializer.Serialize(writer, "Value not available");
                    return;
                case RangeInfo.ValueNotDefined:
                    serializer.Serialize(writer, "Value not defined");
                    return;
                case RangeInfo.ValueNotValid:
                    serializer.Serialize(writer, "Value not valid");
                    return;
            }
            throw new Exception("Cannot marshal type RangeInfo");
        }

        public static readonly RangeInfoConverter Singleton = new RangeInfoConverter();
    }

    internal class ExtendedDataRecordUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExtendedDataRecordUnit) || t == typeof(ExtendedDataRecordUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "%":
                    return ExtendedDataRecordUnit.Unit;
                case "-":
                    return ExtendedDataRecordUnit.Purple;
                case "1/min":
                    return ExtendedDataRecordUnit.The1Min;
                case "A":
                    return ExtendedDataRecordUnit.A;
                case "Nm":
                    return ExtendedDataRecordUnit.Nm;
                case "V":
                    return ExtendedDataRecordUnit.V;
                case "Warm Up Cycles":
                    return ExtendedDataRecordUnit.WarmUpCycles;
                case "bar":
                    return ExtendedDataRecordUnit.Bar;
                case "km":
                    return ExtendedDataRecordUnit.Km;
                case "km/h":
                    return ExtendedDataRecordUnit.KmH;
                case "m/s²":
                    return ExtendedDataRecordUnit.MS;
                case "mbar":
                    return ExtendedDataRecordUnit.Mbar;
                case "mm":
                    return ExtendedDataRecordUnit.Mm;
                case "mm/s":
                    return ExtendedDataRecordUnit.MmS;
                case "ms":
                    return ExtendedDataRecordUnit.Ms;
                case "rpm":
                    return ExtendedDataRecordUnit.Rpm;
                case "°":
                    return ExtendedDataRecordUnit.Empty;
                case "°/s":
                    return ExtendedDataRecordUnit.S;
                case "°C":
                    return ExtendedDataRecordUnit.C;
            }
            throw new Exception("Cannot unmarshal type ExtendedDataRecordUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExtendedDataRecordUnit)untypedValue;
            switch (value)
            {
                case ExtendedDataRecordUnit.Unit:
                    serializer.Serialize(writer, "%");
                    return;
                case ExtendedDataRecordUnit.Purple:
                    serializer.Serialize(writer, "-");
                    return;
                case ExtendedDataRecordUnit.The1Min:
                    serializer.Serialize(writer, "1/min");
                    return;
                case ExtendedDataRecordUnit.A:
                    serializer.Serialize(writer, "A");
                    return;
                case ExtendedDataRecordUnit.Nm:
                    serializer.Serialize(writer, "Nm");
                    return;
                case ExtendedDataRecordUnit.V:
                    serializer.Serialize(writer, "V");
                    return;
                case ExtendedDataRecordUnit.WarmUpCycles:
                    serializer.Serialize(writer, "Warm Up Cycles");
                    return;
                case ExtendedDataRecordUnit.Bar:
                    serializer.Serialize(writer, "bar");
                    return;
                case ExtendedDataRecordUnit.Km:
                    serializer.Serialize(writer, "km");
                    return;
                case ExtendedDataRecordUnit.KmH:
                    serializer.Serialize(writer, "km/h");
                    return;
                case ExtendedDataRecordUnit.MS:
                    serializer.Serialize(writer, "m/s²");
                    return;
                case ExtendedDataRecordUnit.Mbar:
                    serializer.Serialize(writer, "mbar");
                    return;
                case ExtendedDataRecordUnit.Mm:
                    serializer.Serialize(writer, "mm");
                    return;
                case ExtendedDataRecordUnit.MmS:
                    serializer.Serialize(writer, "mm/s");
                    return;
                case ExtendedDataRecordUnit.Ms:
                    serializer.Serialize(writer, "ms");
                    return;
                case ExtendedDataRecordUnit.Rpm:
                    serializer.Serialize(writer, "rpm");
                    return;
                case ExtendedDataRecordUnit.Empty:
                    serializer.Serialize(writer, "°");
                    return;
                case ExtendedDataRecordUnit.S:
                    serializer.Serialize(writer, "°/s");
                    return;
                case ExtendedDataRecordUnit.C:
                    serializer.Serialize(writer, "°C");
                    return;
            }
            throw new Exception("Cannot marshal type ExtendedDataRecordUnit");
        }

        public static readonly ExtendedDataRecordUnitConverter Singleton = new ExtendedDataRecordUnitConverter();
    }

    internal class ParamConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Param) || t == typeof(Param?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ExtendedDataRecord>(reader);
                    return new Param { ExtendedDataRecord = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<ExtendedDataRecord[]>(reader);
                    return new Param { ExtendedDataRecordArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Param");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Param)untypedValue;
            if (value.ExtendedDataRecordArray != null)
            {
                serializer.Serialize(writer, value.ExtendedDataRecordArray);
                return;
            }
            if (value.ExtendedDataRecord != null)
            {
                serializer.Serialize(writer, value.ExtendedDataRecord);
                return;
            }
            throw new Exception("Cannot marshal type Param");
        }

        public static readonly ParamConverter Singleton = new ParamConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ECU specific Record":
                    return Value.EcuSpecificRecord;
                case "First Occurence":
                    return Value.FirstOccurence;
                case "Last Occurence":
                    return Value.LastOccurence;
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Value)untypedValue;
            switch (value)
            {
                case Value.EcuSpecificRecord:
                    serializer.Serialize(writer, "ECU specific Record");
                    return;
                case Value.FirstOccurence:
                    serializer.Serialize(writer, "First Occurence");
                    return;
                case Value.LastOccurence:
                    serializer.Serialize(writer, "Last Occurence");
                    return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }

    internal class SnapshotDataRecordUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SnapshotDataRecordUnion) || t == typeof(SnapshotDataRecordUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleSnapshotDataRecord>(reader);
                    return new SnapshotDataRecordUnion { PurpleSnapshotDataRecord = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<SnapshotDataRecordElement[]>(reader);
                    return new SnapshotDataRecordUnion { SnapshotDataRecordElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type SnapshotDataRecordUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SnapshotDataRecordUnion)untypedValue;
            if (value.SnapshotDataRecordElementArray != null)
            {
                serializer.Serialize(writer, value.SnapshotDataRecordElementArray);
                return;
            }
            if (value.PurpleSnapshotDataRecord != null)
            {
                serializer.Serialize(writer, value.PurpleSnapshotDataRecord);
                return;
            }
            throw new Exception("Cannot marshal type SnapshotDataRecordUnion");
        }

        public static readonly SnapshotDataRecordUnionConverter Singleton = new SnapshotDataRecordUnionConverter();
    }

    internal class MaskConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Mask) || t == typeof(Mask?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "0x0C")
            {
                return Mask.The0X0C;
            }
            throw new Exception("Cannot unmarshal type Mask");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Mask)untypedValue;
            if (value == Mask.The0X0C)
            {
                serializer.Serialize(writer, "0x0C");
                return;
            }
            throw new Exception("Cannot marshal type Mask");
        }

        public static readonly MaskConverter Singleton = new MaskConverter();
    }

    internal class SoftwareConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Software) || t == typeof(Software?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<Ware>(reader);
                    return new Software { Ware = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Ware[]>(reader);
                    return new Software { WareArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Software");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Software)untypedValue;
            if (value.WareArray != null)
            {
                serializer.Serialize(writer, value.WareArray);
                return;
            }
            if (value.Ware != null)
            {
                serializer.Serialize(writer, value.Ware);
                return;
            }
            throw new Exception("Cannot marshal type Software");
        }

        public static readonly SoftwareConverter Singleton = new SoftwareConverter();
    }
}

